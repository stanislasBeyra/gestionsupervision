@extends('layoutsapp.master')
@section('title', 'Problèmes Prioritaires')

@section('content')
<!-- Ajout des dépendances Flatpickr -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://npmcdn.com/flatpickr/dist/l10n/fr.js"></script>




    <div class="toast-container position-fixed top-0 end-0 p-3">
        <!-- Les toasts seront ajoutés ici dynamiquement -->
    </div>



    <!-- Section Tableau -->
    <div id="table-section">
        <div class="card">
            <div class="card-header text-center py-3">
                <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 gap-md-0">
                    <h4 class="h4 mb-0 text-primary fw-bold">
                        <i class="fas fa-list-alt me-2"></i>Problèmes prioritaires identifiés
                    </h4>
                    <button type="button" class="btn btn-primary" onclick="showForm()">
                        <i class="fas fa-plus-circle me-2"></i>Ajouter un problème
                    </button>
                </div>

                <style>
                    /* Styles pour la gestion responsive */
                    @media (max-width: 768px) {
                        .h4 {
                            font-size: 1.25rem;
                            /* Taille réduite sur mobile */
                        }

                        .btn {
                            padding: 0.5rem 1rem;
                            /* Padding ajusté pour mobile */
                        }
                    }

                    @media (max-width: 576px) {
                        .h4 {
                            font-size: 1.1rem;
                            /* Encore plus petit sur très petits écrans */
                        }
                    }
                </style>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover text-nowrap">


                        <thead>
                            <tr>
                                <th scope="col">N°</th>
                                <th scope="col">Problèmes prioritaires</th>
                                <th scope="col">Causes</th>
                                <th scope="col">Actions correctrices</th>
                                <th scope="col">Sources vérification</th>
                                <th scope="col">Acteurs</th>
                                <th scope="col">Ressources</th>
                                <th scope="col">Délais</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="problems-table">
                            <!-- Données dynamiques -->
                        </tbody>
                    </table>
                </div>

                <div id="empty-message" class="text-center p-4 d-none">
                    <i class="fas fa-clipboard fa-3x mb-3 text-muted"></i>
                    <p class="text-muted">Aucun problème prioritaire enregistré</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Section Formulaire -->
    <div id="form-section" class="d-none">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0" id="form-title">
                    <i class="fas fa-edit me-2"></i>Ajouter un problème prioritaire
                </h4>
            </div>
            <div class="card-body">
                <form id="problemForm" onsubmit="handleSubmit(event)">
                    @csrf
                    <div class="row g-4">
                        <!-- Problème -->
                        <div class="col-md-6">
                            <div class="form-outline">
                                <textarea id="probleme" name="probleme" class="form-control active" rows="3" required></textarea>
                                <label class="form-label" for="probleme">Problème prioritaire</label>
                            </div>
                            <div class="invalid-feedback">Veuillez décrire le problème</div>
                        </div>

                        <!-- Causes -->
                        <div class="col-md-6">
                            <div class="form-outline">
                                <textarea id="causes" name="causes" class="form-control active" rows="3" required></textarea>
                                <label class="form-label" for="causes">Causes</label>
                            </div>
                        </div>

                        <!-- Actions -->
                        <div class="col-md-6">
                            <div class="form-outline">
                                <textarea id="actions" name="actions" class="form-control active" rows="3" required></textarea>
                                <label class="form-label" for="actions">Actions correctrices</label>
                            </div>
                        </div>

                        <!-- Sources -->
                        <div class="col-md-6">
                            <div class="form-outline">
                                <textarea id="sources" name="sources" class="form-control active" rows="3" required></textarea>
                                <label class="form-label" for="sources">Sources de vérification</label>
                            </div>
                        </div>

                        <!-- Acteurs -->
                        <div class="col-md-4">
                            <div class="form-outline">
                                <input type="text" id="acteurs" name="acteurs" class="form-control active" required />
                                <label class="form-label" for="acteurs">Acteurs (Responsables)</label>
                            </div>
                        </div>

                        <!-- Ressources -->
                        <div class="col-md-4">
                            <div class="form-outline">
                                <input type="text" id="ressources" name="ressources" class="form-control active" required />
                                <label class="form-label" for="ressources">Ressources nécessaires</label>
                            </div>
                        </div>

                        <!-- Délai -->
                        <div class="col-md-4">
                            <div class="form-outline">
                                <input type="text" id="delai" name="delai" class="form-control" placeholder="Sélectionner une date" required />
                                <label class="form-label" for="delai">Délai d'exécution</label>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end gap-2 mt-4">
                        <button type="button" class="btn btn-light" onclick="showTable()">
                            <i class="fas fa-times me-2"></i>Annuler
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i>Enregistrer
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>


<script>
    // Variables globales
    let problemCount = 0;
    let editingRow = null;

    // Initialisation
    document.addEventListener('DOMContentLoaded', function() {
        try {
            // Initialiser les form-outline de MDB
            document.querySelectorAll('.form-outline').forEach((formOutline) => {
                new mdb.Input(formOutline).init();
            });



            // Initialiser Flatpickr
            const fp = flatpickr("#delai", {
                locale: "fr",
                enableTime: true,
                dateFormat: "d/m/Y H:i",
                time_24hr: true,
                allowInput: true,
                minuteIncrement: 1,
            });

            // Initialiser les tooltips
            initTooltips();

            // Vérifier si le tableau est vide
            checkEmptyTable();
        } catch (error) {
            console.error('Erreur lors de l\'initialisation:', error);
        }
    });

    // Gestion des tooltips
    function initTooltips() {
        try {
            const tooltips = document.querySelectorAll('[data-mdb-toggle="tooltip"]');
            tooltips.forEach((el) => {
                if (mdb && mdb.Tooltip) {
                    new mdb.Tooltip(el);
                }
            });
        } catch (error) {
            console.error('Erreur lors de l\'initialisation des tooltips:', error);
        }
    }

    // Gestion des toasts
    // function showToast(message, type = 'success') {
    //     const toast = document.getElementById('toast');
    //     if (!toast) return;

    //     toast.classList.remove('d-none', 'bg-success', 'bg-danger');
    //     toast.classList.add(`bg-${type}`);
    //     toast.querySelector('.toast-body').textContent = message;

    //     setTimeout(() => hideToast(), 3000);
    // }

    function showToast(message) {
        const toastContainer = document.querySelector('.toast-container');

        const toastElement = document.createElement('div');
        toastElement.className = 'toast align-items-center text-bg-success border-0';
        toastElement.setAttribute('role', 'alert');
        toastElement.setAttribute('aria-live', 'assertive');
        toastElement.setAttribute('aria-atomic', 'true');

        toastElement.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    `;

        toastContainer.appendChild(toastElement);

        const toast = new mdb.Toast(toastElement, {
            autohide: true,
            delay: 3000
        });

        toast.show();

        toastElement.addEventListener('hidden.bs.toast', () => {
            toastElement.remove();
        });

        setTimeout(() => {
            alert.remove();
        }, 3000);
    }


    function hideToast() {
        const toast = document.getElementById('toast');
        if (toast) {
            toast.classList.add('d-none');
        }
    }

    // Gestion du formulaire
    function showForm() {
        document.getElementById('form-section').classList.remove('d-none');
        document.getElementById('table-section').classList.add('d-none');
        document.getElementById('form-title').innerHTML =
            `<i class="fas fa-plus-circle me-2"></i>Ajouter un problème prioritaire`;
    }

    function showTable() {
        document.getElementById('form-section').classList.add('d-none');
        document.getElementById('table-section').classList.remove('d-none');
        document.getElementById('problemForm').reset();
        editingRow = null;
    }

    async function handleSubmit(event) {
        event.preventDefault();
        const form = event.target;

        if (!form.checkValidity()) {
            form.classList.add('was-validated');
            return;
        }

        const submitBtn = form.querySelector('button[type="submit"]');
        if (!submitBtn) return;

        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Traitement...';

        try {
            const formData = new FormData(form);

            // Vérifier que la date est valide
            const dateValue = document.querySelector('#delai')._flatpickr?.selectedDates[0];
            if (!dateValue) {
                throw new Error('Date invalide');
            }

            if (editingRow) {
                updateRow(editingRow, formData);
                showToast('Problème mis à jour avec succès');
            } else {
                addNewRow(formData);
                showToast('Problème ajouté avec succès');
            }
            showTable();
            checkEmptyTable();
        } catch (error) {
            console.error('Erreur lors de la soumission:', error);
            showToast('Une erreur est survenue', 'danger');
        } finally {
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<i class="fas fa-save me-2"></i>Enregistrer';
            form.classList.remove('was-validated');
        }
    }

    // Gestion des lignes du tableau
    function addNewRow(formData) {
        try {
            problemCount++;
            const tbody = document.getElementById('problems-table');
            if (!tbody) return;

            const row = document.createElement('tr');
            const safeText = (text) => text ? text.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '';

            row.innerHTML = `
            <td>${problemCount}</td>
            <td class="text-wrap">${safeText(formData.get('probleme'))}</td>
            <td class="text-wrap">${safeText(formData.get('causes'))}</td>
            <td class="text-wrap">${safeText(formData.get('actions'))}</td>
            <td class="text-wrap">${safeText(formData.get('sources'))}</td>
            <td>${safeText(formData.get('acteurs'))}</td>
            <td>${safeText(formData.get('ressources'))}</td>
            <td>${safeText(formData.get('delai'))}</td>
            <td>
                <div class="btn-group btn-group-sm">
                    <button type="button" class="btn btn-link text-warning" 
                            onclick="editProblem(this)" 
                            title="Modifier">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button type="button" class="btn btn-link text-danger" 
                            onclick="deleteProblem(this)" 
                            title="Supprimer">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </td>
        `;

            tbody.appendChild(row);
            initTooltips();
        } catch (error) {
            console.error('Erreur lors de l\'ajout de ligne:', error);
            throw error;
        }
    }

    function updateRow(row, formData) {
        if (!row) return;

        const safeText = (text) => text ? text.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '';

        row.cells[1].textContent = formData.get('probleme');
        row.cells[2].textContent = formData.get('causes');
        row.cells[3].textContent = formData.get('actions');
        row.cells[4].textContent = formData.get('sources');
        row.cells[5].textContent = formData.get('acteurs');
        row.cells[6].textContent = formData.get('ressources');
        row.cells[7].textContent = formData.get('delai');
    }

    function editProblem(button) {
        try {
            const row = button.closest('tr');
            if (!row) return;

            editingRow = row;
            const form = document.getElementById('problemForm');
            if (!form) return;

            // Remplir le formulaire
            const fields = ['probleme', 'causes', 'actions', 'sources', 'acteurs', 'ressources'];
            fields.forEach((field, index) => {
                if (form.elements[field]) {
                    form.elements[field].value = row.cells[index + 1].textContent;
                }
            });

            // Mettre à jour le datepicker
            const datepicker = document.querySelector("#delai")?._flatpickr;
            if (datepicker) {
                datepicker.setDate(row.cells[7].textContent, true);
            }

            // Activer les labels
            document.querySelectorAll('.form-outline').forEach((formOutline) => {
                formOutline.classList.add('active');
            });

            document.getElementById('form-title').innerHTML =
                `<i class="fas fa-edit me-2"></i>Modifier un problème prioritaire`;

            showForm();
        } catch (error) {
            console.error('Erreur lors de l\'édition:', error);
            showToast('Erreur lors de l\'édition', 'danger');
        }
    }

    function deleteProblem(button) {
        try {
            const row = button.closest('tr');
            if (!row) return;

            if (confirm('Êtes-vous sûr de vouloir supprimer ce problème ?')) {
                row.remove();
                updateNumbers();
                checkEmptyTable();
                showToast('Problème supprimé avec succès');
            }
        } catch (error) {
            console.error('Erreur lors de la suppression:', error);
            showToast('Erreur lors de la suppression', 'danger');
        }
    }

    function updateNumbers() {
        const rows = document.querySelectorAll('#problems-table tr');
        rows.forEach((row, index) => {
            row.cells[0].textContent = index + 1;
        });
        problemCount = rows.length;
    }

    function checkEmptyTable() {
        const emptyMessage = document.getElementById('empty-message');
        const tableBody = document.getElementById('problems-table');

        if (emptyMessage && tableBody) {
            const hasRows = tableBody.querySelectorAll('tr').length > 0;
            emptyMessage.classList.toggle('d-none', hasRows);
        }
    }
</script>
@endsection